PSSacer/HT (High-resolution Timer) RELEASE NOTES
================================================
Version 1.0.0

								2010-10-22

CREDIT
------

This software was developed by the National Institute of Advanced 
Industrial Science and Technology (AIST), Japan. A part of the development 
was supported by a grant from the Ministry of Education, Sports, Culture, 
Science and Technology (MEXT) of Japan through the NAREGI (National 
Research Grid Initiative) Project.
PSPACER AND PSPACER/HT ARE LICENSED UNDER THE GNU GPL.


WHAT IS PSPACER/HT?
-------------------

PSPacer/HT is a derived version of PSPacer.  HT stands for
high-resolution timer.

PSPacer (Precise Software Pacer) is a qdisc module which realizes 
precise transmission bandwidth control. It makes bursty traffic which is 
often generated by TCP smooth without any special hardware.

Bursty traffic can degrade the communication performance, because it 
causes buffer overflow at intermediate network nodes and results in 
packet losses. In a bursty traffic, packets are sent back to back. By 
adding a short pause in between the packets, traffic bursts can be 
avoided.

PSPacer controls the interval between outgoing packets very precisely.
The key idea of PSPacer is to determine transmission timing of packets
by the number of bytes transferred. If packets are transferred back to
back, the timing a packet is sent can be determined by the number of
bytes sent before the packet. PSPacer fills the gaps between time
aligned "real packets" (the packets which are sent by user program) by
"gap packets". The real packets and gap packets are sent back to back,
and thus the timing of transmission of each real packet can be
precisely controlled by adjusting the gap packet size. As the gap
packets, the IEEE 802.3x PAUSE frames are used. PAUSE frames are
discarded at a switch input port, and only real packets go through the
switch keeping the original intervals.

However, PSPacer has the following limitations in general use.  (1)
PSPacer essentially requires the system to fully fill the network pipe with
packets.  Therefore, the system has to have the capability to transmit
packets at the wire rate.  For instance, if a Gigabit Ethernet NIC is
connected through a 33MHz/32bit PCI bus, the bottleneck is thus PCI
bus, and then the system can not transmit packets at 1 gigabit per second.
As a result, the output traffic becomes imprecise.  (2) PSPacer uses
the IEEE 802.3x PAUSE frame as a gap packet.  Therefore, PSPacer only
works on Ethernet.  And also, PAUSE frames can not be used for the
original purpose.  Therefore, the IEEE 802.3x flow control can not
stop transmission from the switch and/or router to the PC.  (3)
PSPacer can not support pseudo network devices such as bonding and
tap devices, because these devices can not properly handle gap
packets.

In order to resolve the above limitations of the original PSPacer,
PSPacer/HT (High-resolution Timer) controls inter packet gaps by
using a high-resolution timer (hrtimer) instead of gap packets. 
PSPacer/HT determines the transmission timing of a packet and then
registers the timing as a high-resolution timer event.  When the event
is activated, the packet is transmitted.

NOTE: In Linux kernel 2.6.21 and earlier, the packet scheduling
subsystem used the low-resolution timer with a jiffies resolution. In
Linux kernel 2.6.22 and later, it was changed to use hrtimer.  After
kernel 2.6.31, the timer resolution improved from 1 microsecond to
1/16 microsecond.


COMPILATION AND INSTALLATION
----------------------------

Installation from the source tallball
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The following source codes are required for the compilation:

	- Linux kernel 2.6.31 and later
	- iproute2

NOTE: Since the iproute2 package is tightly coupled with the kernel, 
you must use a proper combination. see TESTED ENVIRONMENT for more 
information.

1. Unpack the iproute2 tarball:

	$ tc -V  # check the iproute2 version.
	tc utility, iproute2-<version>
	$ cd /opt
	$ wget http://devresources.linux-foundation.org/dev/iproute2/download/
	  iproute2-<version>.tar.gz
	$ tar zxvf iproute2-<version>.tar.gz
	$ ln -s iproute2-<version> iproute2

If you use PSPacer/HT on the Debian GNU/Linux, issue the following command:

	$ cd /opt
	$ apt-get source iproute2
	$ ln -s iproute-<version> iproute2
	
2. Unpack the PSPacer/HT tarball:

	$ tar zxvf pspacer-ht-<version>.tar.gz

3. Do make and install:

	$ cd pspht-<version>
	$ ./configure
	$ make
	$ su
	# make install

To build for kernel different than the installed kernel, issue
make command with KERNELRELEASE variable:

	$ make KERNELRELEASE=2.6.31
	$ su
	# make KERNELRELEASE=2.6.31 install


......................................................................
LICENSE		- The GPL license.
Makefile	- Makefile.
README		- This file.
ChangeLog	- The ChangeLog.
kernel/		- The kernel module.
scripts/	- Some sample setup/test scripts.
tc/		- The shared library for tc (8).
......................................................................

SIMPLE USAGE
------------
You check whether PSPacer/HT works properly by using iperf as follows:

1. Setup

	(add the prio qdisc as the root qdisc)
	# /sbin/tc qdisc add dev eth0 root handle 1: prio bands 3
	(add the PSPacer/HT qdisc whose target rate is 500Mbps)
	# /sbin/tc qdisc add dev eth0 parent 1:1 handle 10: pspht rate 500mbit
	(add the u32 filter for the iperf benchmark)
	# /sbin/tc filter add dev eth0 protocol ip parent 1: prio 1 \
	u32 match ip dport 5001 0xffff flowid 1:1

2. Run iperf

	$ iperf -c <server host> -i 10 -t 60
	------------------------------------------------------------
	Client connecting to XXXX, TCP port 5122
	TCP window size: 16.0 KByte (default)
	------------------------------------------------------------
	[  3] local 192.168.1.1 port 46457 connected with 192.168.1.2 port 5122
	[  3]  0.0-10.0 sec    567 MBytes    476 Mbits/sec
	[  3] 10.0-20.0 sec    567 MBytes    476 Mbits/sec
		:

3. Cleanup

	(remove all)
	# /sbin/tc qdisc del dev eth0 root
	(remove the PSPacer/HT module)
	# /sbin/rmmod sch_pspht


TESTED ENVIRONMENT
------------------
The software is tested on the following environments:

- Linux distribution:
	* CentOS 5 (kernel 2.6.31.13 + iproute2 ss061002)
	* Ubuntu 9.04 (kernel 2.6.27 + iproute2 ss080417)
	* Debian GNU/Linux (kernel 2.6.34 + iproute2 ss100519)
